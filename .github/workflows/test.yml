name: test

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

defaults:
  run:
    shell: bash

jobs:
  # Build .so/.bundle files, test and upload them as build artifacts
  compile-and-test:
    name: build and test on ${{ matrix.build.ruby }} / ${{ matrix.build.os }}
    runs-on: ${{ matrix.build.os }}
    env:
      TARGET: ${{ matrix.build.target }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ruby: '3.0'
            artifact: lib/lib-ruby-parser/native/lib_ruby_parser.so

          - os: macos-latest
            target: x86_64-apple-darwin
            ruby: '3.0'
            artifact: lib/lib-ruby-parser/native/lib_ruby_parser.bundle

          - os: windows-latest
            target: x86_64-pc-windows-gnu
            ruby: '2.6'
            artifact: lib/lib-ruby-parser/native/2.6/lib_ruby_parser.so

          - os: windows-latest
            target: x86_64-pc-windows-gnu
            ruby: '2.7'
            artifact: lib/lib-ruby-parser/native/2.7/lib_ruby_parser.so

          - os: windows-latest
            target: x86_64-pc-windows-gnu
            ruby: '3.0'
            artifact: lib/lib-ruby-parser/native/3.0/lib_ruby_parser.so

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.build.ruby }}
          bundler-cache: true

      - name: install rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: run tests
        run: make test

      - name: upload dylib
        uses: actions/upload-artifact@v2
        with:
          name: dylib-${{ matrix.build.target }}-${{ matrix.build.ruby }}
          path: ${{ matrix.build.artifact }}

  # Download .so/.bundle artifacts, pack .gem files and upload them as artifacts
  build-gem:
    needs: ['compile-and-test']
    name: build gem on ${{ matrix.build.os }}
    runs-on: ${{ matrix.build.os }}
    env:
      TARGET: ${{ matrix.build.target }}
    strategy:
      fail-fast: false
      matrix:
        build:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact: lib-ruby-parser-0.0.1-x86_64-linux.gem

          - os: macos-latest
            target: x86_64-apple-darwin
            artifact: lib-ruby-parser-0.0.1-x86_64-darwin.gem

          - os: windows-latest
            target: x86_64-pc-windows-gnu
            artifact: lib-ruby-parser-0.0.1-x86_64-mingw32.gem

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'

      # download common 3.0 dylib artifact
      - uses: actions/download-artifact@v2
        with:
          name: dylib-${{ matrix.build.target }}-3.0

      # move 3.0 linux dylib
      - name: move 3.0 .so to lib/lib-ruby-parser/native
        run: mv lib_ruby_parser.so lib/lib-ruby-parser/native/lib_ruby_parser.so
        if: runner.os == 'Linux'

      # move 3.0 macos dylib
      - name: move 3.0 .bundle to lib/lib-ruby-parser/native
        run: mv lib_ruby_parser.bundle lib/lib-ruby-parser/native/lib_ruby_parser.bundle
        if: runner.os == 'macOS'

      # move 3.0 windows dylib
      - name: move 3.0 .so to lib/lib-ruby-parser/native/3.0/
        run: mv lib_ruby_parser.so lib/lib-ruby-parser/native/3.0/lib_ruby_parser.so
        if: runner.os == 'Windows'

      # download and move 2.7 windows dylib artifact
      - uses: actions/download-artifact@v2
        with:
          name: dylib-${{ matrix.build.target }}-2.7
        if: runner.os == 'Windows'

      - name: move 2.7 .so to lib/lib-ruby-parser/native/2.7/
        run: mv lib_ruby_parser.so lib/lib-ruby-parser/native/2.7/lib_ruby_parser.so
        if: runner.os == 'Windows'

      # download and move 2.6 windows dylib artifact
      - uses: actions/download-artifact@v2
        with:
          name: dylib-${{ matrix.build.target }}-2.6
        if: runner.os == 'Windows'

      - name: move 2.6 .so to lib/lib-ruby-parser/native/2.6/
        run: mv lib_ruby_parser.so lib/lib-ruby-parser/native/2.6/lib_ruby_parser.so
        if: runner.os == 'Windows'

      - name: build .gem file
        run: |
          ls -l
          ls -l lib/lib-ruby-parser/native/
          ls -l lib/lib-ruby-parser/native/2.6/
          ls -l lib/lib-ruby-parser/native/2.7/
          ls -l lib/lib-ruby-parser/native/3.0/
          make build-package

      - name: upload .gem
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.build.artifact }}
          path: build/${{ matrix.build.artifact }}

  # download .gem artifacts, "gem install" them and run very naive smoke test
  test-gem:
    needs: ['build-gem']
    name: test gem on ${{ matrix.ruby }} / ${{ matrix.os.name }}
    runs-on: ${{ matrix.os.name }}
    strategy:
      fail-fast: false
      matrix:
        ruby: ['2.6', '2.7', '3.0']
        os:
          - { name: 'ubuntu-latest',  artifact: lib-ruby-parser-0.0.1-x86_64-linux.gem }
          - { name: 'macos-latest',   artifact: lib-ruby-parser-0.0.1-x86_64-darwin.gem }
          - { name: 'windows-latest', artifact: lib-ruby-parser-0.0.1-x86_64-mingw32.gem }

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: install ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}

      - name: download .gem artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.os.artifact }}

      - name: install gem
        run: gem install ${{ matrix.os.artifact }}

      - name: run smoke test
        run: ruby -rlib-ruby-parser -e "pp LibRubyParser.parse('42', {})"
